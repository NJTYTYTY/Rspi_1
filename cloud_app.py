from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional, Dict, Any
import uvicorn
from datetime import datetime
import json
import os

app = FastAPI(title="Shrimp Farm Cloud Controller", version="1.0.0")

# === DATA MODELS ===
class LiftCommand(BaseModel):
    pond_id: int
    action: str = "lift"  # lift, status
    timestamp: Optional[str] = None

class LiftUpCommand(BaseModel):
    pondId: str  # frontend ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô string
    action: str = "lift_up"
    timestamp: Optional[str] = None

class LiftDownCommand(BaseModel):
    pondId: str  # frontend ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô string
    action: str = "lift_down"
    timestamp: Optional[str] = None

class JobResponse(BaseModel):
    has_job: bool
    job_data: Optional[Dict[str, Any]] = None
    message: str

# === IN-MEMORY STORAGE ===
# ‡πÉ‡∏ô production ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ database ‡πÅ‡∏ó‡∏ô
pending_jobs: Dict[int, Dict[str, Any]] = {}
completed_jobs: Dict[int, Dict[str, Any]] = {}

# === API ENDPOINTS ===

@app.get("/")
async def root():
    return {
        "message": "Shrimp Farm Cloud Controller API",
        "version": "1.0.0",
        "endpoints": {
            "POST /lift": "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡πÄ‡∏ä‡∏∑‡∏≠‡∏Å (Pi)",
            "POST /lift-up": "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡∏¢‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô (Frontend)",
            "POST /lift-down": "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡∏¢‡∏≠‡∏•‡∏á (Frontend)",
            "GET /job/{pond_id}": "Pi ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏°‡∏±‡πâ‡∏¢",
            "POST /job/{pond_id}/complete": "Pi ‡πÅ‡∏à‡πâ‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à",
            "GET /status": "‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"
        }
    }

@app.post("/lift")
async def create_lift_command(command: LiftCommand):
    """User ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡πÄ‡∏ä‡∏∑‡∏≠‡∏Å‡∏°‡∏≤"""
    try:
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
        if not command.timestamp:
            command.timestamp = datetime.now().isoformat()
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏á‡∏≤‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ô pending_jobs
        job_data = {
            "pond_id": command.pond_id,
            "action": command.action,
            "timestamp": command.timestamp,
            "created_at": datetime.now().isoformat(),
            "status": "pending"
        }
        
        pending_jobs[command.pond_id] = job_data
        
        print(f"üìù ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡πÄ‡∏ä‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡πà‡∏≠ {command.pond_id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        
        return {
            "success": True,
            "message": f"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡πÄ‡∏ä‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡πà‡∏≠ {command.pond_id} ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
            "job_id": command.pond_id,
            "timestamp": command.timestamp
        }
        
    except Exception as e:
        print(f"‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {e}")
        raise HTTPException(status_code=500, detail=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@app.post("/lift-up")
async def create_lift_up_command(command: LiftUpCommand):
    """Frontend ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡∏¢‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤"""
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á pondId ‡πÄ‡∏õ‡πá‡∏ô int
        pond_id = int(command.pondId)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
        if not command.timestamp:
            command.timestamp = datetime.now().isoformat()
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏á‡∏≤‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ô pending_jobs
        job_data = {
            "pond_id": pond_id,
            "action": command.action,
            "timestamp": command.timestamp,
            "created_at": datetime.now().isoformat(),
            "status": "pending"
        }
        
        pending_jobs[pond_id] = job_data
        
        print(f"üìù ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡∏¢‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡πà‡∏≠ {pond_id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        
        return {
            "success": True,
            "message": f"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡∏¢‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡πà‡∏≠ {pond_id} ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
            "job_id": pond_id,
            "timestamp": command.timestamp
        }
        
    except ValueError:
        raise HTTPException(status_code=400, detail="pondId ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
    except Exception as e:
        print(f"‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡∏¢‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô: {e}")
        raise HTTPException(status_code=500, detail=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@app.post("/lift-down")
async def create_lift_down_command(command: LiftDownCommand):
    """Frontend ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡∏¢‡∏≠‡∏•‡∏á‡∏°‡∏≤"""
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á pondId ‡πÄ‡∏õ‡πá‡∏ô int
        pond_id = int(command.pondId)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
        if not command.timestamp:
            command.timestamp = datetime.now().isoformat()
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏á‡∏≤‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ô pending_jobs
        job_data = {
            "pond_id": pond_id,
            "action": command.action,
            "timestamp": command.timestamp,
            "created_at": datetime.now().isoformat(),
            "status": "pending"
        }
        
        pending_jobs[pond_id] = job_data
        
        print(f"üìù ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡∏¢‡∏≠‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡πà‡∏≠ {pond_id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        
        return {
            "success": True,
            "message": f"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡∏¢‡∏≠‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡πà‡∏≠ {pond_id} ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
            "job_id": pond_id,
            "timestamp": command.timestamp
        }
        
    except ValueError:
        raise HTTPException(status_code=400, detail="pondId ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
    except Exception as e:
        print(f"‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡∏¢‡∏≠‡∏•‡∏á: {e}")
        raise HTTPException(status_code=500, detail=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@app.get("/job/{pond_id}")
async def get_job(pond_id: int):
    """Pi ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏°‡∏±‡πâ‡∏¢"""
    try:
        if pond_id in pending_jobs:
            job = pending_jobs[pond_id]
            print(f"üì§ ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ö‡πà‡∏≠ {pond_id}: {job}")
            
            return JobResponse(
                has_job=True,
                job_data=job,
                message=f"‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡πà‡∏≠ {pond_id}"
            )
        else:
            return JobResponse(
                has_job=False,
                job_data=None,
                message=f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡πà‡∏≠ {pond_id}"
            )
            
    except Exception as e:
        print(f"‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô: {e}")
        raise HTTPException(status_code=500, detail=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@app.post("/job/{pond_id}/complete")
async def complete_job(pond_id: int, result: Dict[str, Any]):
    """Pi ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"""
    try:
        if pond_id in pending_jobs:
            # ‡∏¢‡πâ‡∏≤‡∏¢‡∏à‡∏≤‡∏Å pending ‡πÑ‡∏õ completed
            job = pending_jobs.pop(pond_id)
            job["status"] = "completed"
            job["completed_at"] = datetime.now().isoformat()
            job["result"] = result
            
            completed_jobs[pond_id] = job
            
            print(f"‚úÖ ‡∏ö‡πà‡∏≠ {pond_id} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß: {result}")
            
            return {
                "success": True,
                "message": f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡πà‡∏≠ {pond_id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
            }
        else:
            raise HTTPException(status_code=404, detail=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡πà‡∏≠ {pond_id}")
            
    except Exception as e:
        print(f"‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à: {e}")
        raise HTTPException(status_code=500, detail=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

@app.get("/status")
async def get_status():
    """‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
    return {
        "pending_jobs": len(pending_jobs),
        "completed_jobs": len(completed_jobs),
        "pending_job_list": list(pending_jobs.keys()),
        "completed_job_list": list(completed_jobs.keys()),
        "timestamp": datetime.now().isoformat()
    }

@app.get("/health")
async def health_check():
    """Health check ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Railway"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

# === MAIN ===
if __name__ == "__main__":
    import os
    
    # ‡πÉ‡∏ä‡πâ port ‡∏à‡∏≤‡∏Å environment variable ‡∏´‡∏£‡∏∑‡∏≠ default 8000
    port = int(os.environ.get("PORT", 8000))
    
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Shrimp Farm Cloud Controller...")
    print(f"üì° API ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡πà: http://0.0.0.0:{port}")
    print(f"üìñ ‡∏î‡∏π API docs ‡∏ó‡∏µ‡πà: http://0.0.0.0:{port}/docs")
    
    uvicorn.run(
        "cloud_app:app",
        host="0.0.0.0",
        port=port,
        reload=False  # ‡∏õ‡∏¥‡∏î reload ‡πÉ‡∏ô production
    )
