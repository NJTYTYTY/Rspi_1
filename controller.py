#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import time
import requests
import cv2
import RPi.GPIO as GPIO
import os
from datetime import datetime
from camera import open_camera
from motor import pull_up, pull_down, stop_motor, wait_for_press

# === CONFIG ===
POND_ID = 1
BACKEND_URL = "http://192.168.1.60:3000/api/pond-status/{POND_ID}"
JOB_CHECK_INTERVAL = 5  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
FRONT_API_URL = "https://main-two-peach.vercel.app"

# üëâ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏Ç‡∏≠‡∏á cloud app ‡∏ó‡∏µ‡πà deploy ‡∏ö‡∏ô Railway
CLOUD_API_URL = "https://rspi1-production.up.railway.app"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏à‡∏£‡∏¥‡∏á
JOB_CHECK_INTERVAL = 2  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

# üëâ ‡πÉ‡∏™‡πà ngrok URL ‡∏Ç‡∏≠‡∏á backend main.py (port 8000) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå
BACKEND_URL = "https://railwayreal555-production-5be4.up.railway.app/process"

# === LOG FUNCTION ===
def log(msg):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_PATH, "a") as f:
        f.write(f"[{timestamp}] {msg}\n")
    print(f"[{timestamp}] {msg}")

# === SETUP GPIO ===
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(LIMIT_SWITCH_PIN, GPIO.IN)
GPIO.setup(PWM, GPIO.OUT)
GPIO.setup(INA, GPIO.OUT)
GPIO.setup(INB, GPIO.OUT)
GPIO.setup(relay_pin, GPIO.OUT)
GPIO.output(relay_pin, GPIO.HIGH)

# === MOTOR CONTROL FUNCTIONS ===
def pull_down():
    GPIO.output(PWM, 10)
    GPIO.output(INA, GPIO.HIGH)
    GPIO.output(INB, GPIO.LOW)

def pull_up():
    GPIO.output(PWM, 10)
    GPIO.output(INA, GPIO.LOW)
    GPIO.output(INB, GPIO.HIGH)

def stop_motor():
    GPIO.output(PWM, 0)
    GPIO.output(INA, GPIO.HIGH)
    GPIO.output(INB, GPIO.LOW)
        
def wait_for_press():
    while True:
        if GPIO.input(LIMIT_SWITCH_PIN) == 0:
            break
        time.sleep(0.1)

def wait_for_release():
    while GPIO.input(LIMIT_SWITCH_PIN) == 0:
        time.sleep(0.01)

# === NEW: STATUS POST FUNCTION ===
def send_status(indexStatus: int):
    """‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Pond Status API"""
    status_messages = {
        1: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡∏Å‡∏¢‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô....",
        2: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ....",
        3: "‡∏ñ‡πà‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à...",
        4: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...",
        5: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!!...."
    }

    message = status_messages.get(indexStatus, "Unknown status")

    try:
        response = requests.post(
            f"{FRONT_API_URL}/api/pond-status/{POND_ID}",
            headers={"Content-Type": "application/json"},
            json={"status": indexStatus, "message": message},
            timeout=5
        )
        if response.status_code == 200:
            log(f"‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {indexStatus}: {message}")
            return True
        else:
            log(f"‚ùå ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß {indexStatus}: {response.status_code}")
            return False
    except Exception as e:
        log(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {indexStatus}: {e}")
        return False


# === CLOUD API FUNCTIONS ===
def check_for_job():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å cloud ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        response = requests.get(f"{CLOUD_API_URL}/job/{POND_ID}", timeout=5)
        if response.status_code == 200:
            data = response.json()
            return data.get("has_job", False), data.get("job_data")
        else:
            log(f"‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.status_code}")
            return False, None
    except Exception as e:
        log(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ cloud: {e}")
        return False, None

def complete_job(result_data):
    """‡πÅ‡∏à‡πâ‡∏á cloud ‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"""
    try:
        response = requests.post(
            f"{CLOUD_API_URL}/job/{POND_ID}/complete",
            json=result_data,
            timeout=5
        )
        if response.status_code == 200:
            log("‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            return True
        else:
            log(f"‚ùå ‡πÅ‡∏à‡πâ‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.status_code}")
            return False
    except Exception as e:
        log(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏à‡πâ‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à: {e}")
        return False

def open_camera(camera_indices=[0, 1, 2]):
    """‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° index ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô frame ‡πÑ‡∏î‡πâ"""
    for idx in camera_indices:
        cap = cv2.VideoCapture(idx, cv2.CAP_V4L2)
        time.sleep(2)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°

        if cap.isOpened():
            ret, frame = cap.read()
            if ret:
                log(f"‚úÖ ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á index {idx}")
                return cap
            else:
                log(f"‚ö†Ô∏è ‡∏Å‡∏•‡πâ‡∏≠‡∏á index {idx} ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û")
        cap.release()

    raise RuntimeError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")

# === MAIN WORK FUNCTION ===
def execute_lift_job(job_data=None):
    """‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏¢‡∏Å‡πÄ‡∏ä‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ"""
    log("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏¢‡∏Å‡πÄ‡∏ä‡∏∑‡∏≠‡∏Å...")
    
    try:
        # === ‡∏¢‡∏Å‡∏¢‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô + ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ ===
        send_status(1)  # ‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡∏Å‡∏¢‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô....
        log("‚¨ÜÔ∏è ‡∏¢‡∏Å‡∏¢‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô")
        start_up_time = time.time()
        pull_up()
        wait_for_press()
        stop_motor()
        time.sleep(3)

        duration_up = time.time() - start_up_time
        log(f"‚úÖ ‡∏¢‡∏Å‡∏¢‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {duration_up:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")

        # === ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ ===
        send_status(2)  # ‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ....
        GPIO.output(relay_pin, GPIO.LOW)
        time.sleep(3)
        log("üì∑ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á...")

        cap = open_camera([0, 1, 2])
        time.sleep(2)

        if not cap.isOpened():
            log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
            raise RuntimeError("‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")

        frame_width = int(cap.get(3))
        frame_height = int(cap.get(4))
        fps = 20.0
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

        video_filename = f"video_pond{POND_ID}_{timestamp}.mp4"
        image_filename = f"shrimp_pond{POND_ID}_{timestamp}.jpg"
        video_path = os.path.join("/home/rwb/depa", video_filename)
        image_path = os.path.join("/home/rwb/depa", image_filename)

        os.makedirs(os.path.dirname(video_path), exist_ok=True)

        log("üé• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ñ‡πà‡∏≤‡∏¢‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠")
        out = cv2.VideoWriter(
            video_path,
            cv2.VideoWriter_fourcc(*'mp4v'),
            fps,
            (frame_width, frame_height)
        )

        start_time = time.time()
        captured_image = None

        stop_motor()

        while True:
            ret, frame = cap.read()
            if not ret:
                log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
                break

            out.write(frame)

            # Capture still image at 2.5s
            if captured_image is None and time.time() - start_time > 2.5:
                captured_image = frame.copy()
                cv2.imwrite(image_path, captured_image)
                send_status(3)  # ‚úÖ ‡∏ñ‡πà‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à...
                log(f"üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ô‡∏¥‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß ‚Üí {image_path}")

            # Stop recording after 5s
            if time.time() - start_time > 5:
                log("‚è±Ô∏è ‡∏Ñ‡∏£‡∏ö 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πà‡∏≤‡∏¢")
                break

        out.release()
        cap.release()

        GPIO.output(relay_pin, GPIO.HIGH)

        # === ‡∏¢‡∏Å‡∏¢‡∏≠‡∏•‡∏á ===
        log("‚¨áÔ∏è ‡∏¢‡∏Å‡∏¢‡∏≠‡∏•‡∏á")
        pull_down()
        time.sleep(10)  # ‡∏¢‡∏Å‡∏•‡∏á 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        stop_motor()
        log("‚úÖ ‡∏¢‡∏Å‡∏¢‡∏≠‡∏•‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à")

        # === ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ backend ===
        send_status(4)  # ‚úÖ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...
        result_data = {
            "status": "success",
            "pond_id": POND_ID,
            "action": "lift_up",
            "timestamp": timestamp,
            "files": {
                "image": image_filename,
                "video": video_filename
            }
        }

        if captured_image is not None:
            log("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...")
            try:
                with open(image_path, "rb") as img_f, open(video_path, "rb") as vid_f:
                    files = [
                        ("files", (image_filename, img_f, "image/jpeg")),
                        ("files", (video_filename, vid_f, "video/mp4"))
                    ]
                    response = requests.post(BACKEND_URL, files=files)

                    if response.status_code == 200:
                        log("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        result_data["backend_response"] = response.json()
                    else:
                        log(f"‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.status_code} - {response.text}")
                        result_data["backend_error"] = f"{response.status_code} - {response.text}"

            except Exception as e:
                log(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
                result_data["backend_error"] = str(e)
        else:
            log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ô‡∏¥‡πà‡∏á‡∏à‡∏∞‡∏™‡πà‡∏á")
            result_data["backend_error"] = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ô‡∏¥‡πà‡∏á‡∏à‡∏∞‡∏™‡πà‡∏á"

        send_status(5)  # ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!!....
        return result_data

    except Exception as e:
        log(f"üî• ERROR ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {e}")
        return {
            "status": "error",
            "pond_id": POND_ID,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

# === HEARTBEAT FUNCTION ===
# Heartbeat ‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÑ‡∏ü‡∏•‡πå heartbeat.py ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å

# === MAIN LOOP ===
def main():
    log("üîå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° controller.py (Cloud Mode)")
    log(f"üåê Cloud API: {CLOUD_API_URL}")
    log(f"üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å {JOB_CHECK_INTERVAL} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    log("üíì Heartbeat ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏¢‡∏Å‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå heartbeat.py")
    
    try:
        while True:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            has_job, job_data = check_for_job()
            
            if has_job:
                log(f"üìã ‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà: {job_data}")
                
                # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                result = execute_lift_job(job_data)
                
                # ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                complete_job(result)
                
                log("‚úÖ ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏£‡∏≠‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà...")
            else:
                log("üò¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô ‡∏£‡∏≠...")
            
            # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
            time.sleep(JOB_CHECK_INTERVAL)
            
    except KeyboardInterrupt:
        log("üõë ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        log(f"üî• ERROR: {e}")
    finally:
        GPIO.cleanup()
        log("üîö ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå GPIO ‡πÅ‡∏•‡πâ‡∏ß")

if __name__ == "__main__":
    main()


